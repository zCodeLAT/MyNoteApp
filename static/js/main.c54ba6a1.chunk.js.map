{"version":3,"sources":["config/config.js","Note/Note.jsx","NoteForm/NoteForm.jsx","App.js","serviceWorker.js","index.js"],"names":["DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","id","window","confirm","removeNote","_this2","react_default","a","createElement","className","onClick","handleRemove","Component","NoteForm","addNote","bind","assertThisInitialized","textInput","value","focus","event","keyCode","console","log","ref","input","placeholder","type","onKeyDown","keyPressed","tabIndex","App","state","notes","app","firebase","initializeApp","db","database","child","on","snap","push","key","val","setState","i","length","splice","remove","note","set","_this3","map","src_Note_Note","src_NoteForm_NoteForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c54ba6a1.chunk.js","sourcesContent":["export const DB_CONFIG = {\n    apiKey: \"AIzaSyBqecYCj0jeUQx5YEwiAabJW3R58P4PAiw\",\n    authDomain: \"reactnotesapp-25780.firebaseapp.com\",\n    databaseURL: \"https://reactnotesapp-25780.firebaseio.com\",\n    projectId: \"reactnotesapp-25780\",\n    storageBucket: \"reactnotesapp-25780.appspot.com\",\n    messagingSenderId: \"944096623355\",\n    appId: \"1:944096623355:web:84713ecf3904450b\"\n}","import React, {Component} from 'react';\nimport './Note.css';\n\nclass Note extends Component {\n    constructor(props){\n        super(props);\n        this.noteContent = props.noteContent;\n        this.noteId = props.noteId;\n        //console.log(this.noteId);\n    }\n    handleRemove(id){\n        //console.log(id);\n        const response=window.confirm('Está seguro que desea eliminar la nota?');\n        if(response){\n        this.props.removeNote(id);\n        }\n        return;\n    }\n\n    render(){\n        return (\n        <div className=\"Note\">\n            <span onClick={()=> this.handleRemove(this.noteId)}>\n              &times;  \n            </span>\n            <p>{this.noteContent}</p>\n        </div> \n        )\n    }\n}\nexport default Note;","import React, {Component} from 'react';\nimport './NoteForm.css';\n\nclass NoteForm extends Component {\n    constructor(){\n        super();\n        this.addNote = this.addNote.bind(this);\n    }\n    addNote(){\n        this.props.addNote(this.textInput.value);\n        this.textInput.value = ''; //Borra valor y vuelve a mostrar \"Write a note\"\n        this.textInput.focus(); // Focus de cursor en el input\n    }\n\n    keyPressed(event) {\n        var x = event.keyCode;\n        if (x === 13) {  // 13 is the Enter key\n            console.log('Press the button');\n        }\n      }\n\n    render(){\n        return (\n        <div className=\"NoteForm\">\n            <input\n            ref={input => {this.textInput = input;}} \n            placeholder=\"Write a note\"\n            type=\"text\"\n            onKeyDown={this.keyPressed}\n            tabIndex=\"0\"\n            />\n\n            <button\n            onClick={this.addNote}\n            >\n                Add Note\n            </button>\n        </div>\n        )\n    }\n}\n\nexport default NoteForm;","import React, {Component} from 'react';\nimport './App.css';\n\nimport firebase from 'firebase';\nimport { DB_CONFIG } from './config/config';\nimport 'firebase/database';\n\nimport Note from './Note/Note';\nimport NoteForm from './NoteForm/NoteForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      notes:[\n        // {noteId: 1, noteContent: 'note 1'},\n        // {noteId: 2, noteContent: 'note 2'},\n      ]\n    }\n    \n    this.app=firebase.initializeApp(DB_CONFIG);\n    this.db = this.app.database().ref().child('notes');\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this); \n  }\n  //A continuación: Apenas el componente se ha mostrado, agregale un listener. \n  //Cuando un nuevo item se ha agregado, pasale todo al estado y actualiza el mismo.\n  componentDidMount(){\n    const {notes} = this.state;\n    this.db.on('child_added', snap => {\n      notes.push({\n        noteId: snap.key,\n        noteContent: snap.val().noteContent\n      })\n      this.setState({notes});\n    })\n    this.db.on('child_removed', snap => {\n      for(let i=0; i<notes.length; i++){\n        if(notes[i].noteId === snap.key){\n          notes.splice(i, 1);\n        }\n      }\n      this.setState({notes}); \n    })\n  }\n\n  removeNote(noteId){\n    this.db.child(noteId).remove();\n  }\n\n  addNote(note){\n    // let { notes }= this.state;\n    // notes.push({\n    //   noteId: notes.length + 1,\n    //   noteContent: note\n    // });\n    //this.setState({notes});\n    this.db.push().set({noteContent: note});\n  }\n\n  render() {\n    return (\n      <div className=\"notesContainer\">\n        <div className=\"notesHeader\">\n          <h1>My Notes app</h1>\n        </div>\n        <div className=\"notesBody\">\n          <ul>\n            {\n              this.state.notes.map(note =>{\n                return (\n                  <Note \n                    noteContent={note.noteContent}\n                    noteId={note.noteId}\n                    key={note.noteId}\n                    removeNote={this.removeNote}\n                  />\n                )\n              })\n            }\n          </ul>\n        </div>\n    <div className=\"notesFooter\">\n            <NoteForm\n              addNote={this.addNote}\n            />\n    </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}